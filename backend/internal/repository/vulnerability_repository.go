package repository

import (
	"github.com/david-santa/vulkyra/backend/internal/models"
	"gorm.io/gorm"
)

func GetAllVulnerabilities(db *gorm.DB) ([]models.Vulnerability, error) {
	var vulns []models.Vulnerability
	err := db.
		Model(&models.Vulnerability{}).
		Select(`vulnerabilities.*, assets.fqdn as asset_name, teams.team_name as owner_name`).
		Joins(`LEFT JOIN assets ON vulnerabilities.asset_id = assets.asset_id`).
		Joins(`LEFT JOIN teams ON vulnerabilities.owner_id = teams.team_id`).
		Find(&vulns).Error
	return vulns, err
}

func GetTeamVulnerabilities(db *gorm.DB, teamID string) ([]models.Vulnerability, error) {
	var vulns []models.Vulnerability
	err := db.
		Model(&models.Vulnerability{}).
		Select(`vulnerabilities.*, assets.fqdn as asset_name, teams.team_name as owner_name`).
		Joins(`LEFT JOIN assets ON vulnerabilities.asset_id = assets.asset_id`).
		Joins(`LEFT JOIN teams ON vulnerabilities.owner_id = teams.team_id`).
		Where("vulnerabilities.owner_id = ?", teamID).
		Find(&vulns).Error
	return vulns, err
}

// CreateVulnerability inserts a new vulnerability and increments the asset's VulnerabilityCount
func CreateVulnerability(db *gorm.DB, vuln *models.Vulnerability) error {
	err := db.Transaction(func(tx *gorm.DB) error {
		if err := tx.Create(vuln).Error; err != nil {
			return err
		}
		if vuln.AssetID != (vuln.AssetID) {
			return nil // No asset to update
		}
		return tx.Model(&models.Asset{}).
			Where("asset_id = ?", vuln.AssetID).
			UpdateColumn("vulnerability_count", gorm.Expr("vulnerability_count + 1")).Error
	})
	return err
}

// DeleteVulnerability deletes a vulnerability and decrements the asset's VulnerabilityCount
func DeleteVulnerability(db *gorm.DB, vulnID string) error {
	return db.Transaction(func(tx *gorm.DB) error {
		var vuln models.Vulnerability
		if err := tx.First(&vuln, "vuln_id = ?", vulnID).Error; err != nil {
			return err
		}
		if err := tx.Delete(&vuln).Error; err != nil {
			return err
		}
		if vuln.AssetID != (vuln.AssetID) {
			return nil // No asset to update
		}
		return tx.Model(&models.Asset{}).
			Where("asset_id = ?", vuln.AssetID).
			UpdateColumn("vulnerability_count", gorm.Expr("vulnerability_count - 1")).Error
	})
}

// RecalculateVulnerabilityCounts updates VulnerabilityCount for all assets (for consistency)
func RecalculateVulnerabilityCounts(db *gorm.DB) error {
	return db.Exec(`UPDATE assets SET vulnerability_count = (
		SELECT COUNT(*) FROM vulnerabilities WHERE vulnerabilities.asset_id = assets.asset_id
	)`).Error
}
