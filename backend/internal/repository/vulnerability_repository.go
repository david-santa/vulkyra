package repository

import (
	"github.com/david-santa/vulkyra/backend/internal/models"
	"github.com/lib/pq"
)

func GetAllVulnerabilities() ([]models.Vulnerability, error) {
	rows, err := db.Query("SELECT v.id, asset_id, a.fqdn AS asset_name, plugin_id, plugin_name, severity, cves, description, v.owner_id, t.name AS owner_name FROM vulnerabilities v JOIN assets a ON v.asset_id = a.id LEFT JOIN teams t on v.owner_id = t.id")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var vulnerabilities []models.Vulnerability
	for rows.Next() {
		var v models.Vulnerability
		if err := rows.Scan(
			&v.ID,
			&v.AssetID,
			&v.AssetName,
			&v.PluginID,
			&v.PluginName,
			&v.Severity,
			pq.Array(&v.CVEs), // <-- wrap CVEs field here
			&v.Description,
			&v.OwnerID,
			&v.OwnerName,
		); err != nil {
			return nil, err
		}
		vulnerabilities = append(vulnerabilities, v)
	}
	return vulnerabilities, nil
}

func GetTeamVulnerabilities(id int) ([]models.Vulnerability, error) {
	rows, err := db.Query("SELECT asset_id, plugin_id, plugin_name, severity, cves, description, owner_id FROM vulnerabilities WHERE owner_id=$1", id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var vulnerabilities []models.Vulnerability
	for rows.Next() {
		var v models.Vulnerability
		if err := rows.Scan(
			&v.AssetID,
			&v.PluginID,
			&v.PluginName,
			&v.Severity,
			pq.Array(&v.CVEs), // <-- wrap CVEs field here
			&v.Description,
			&v.OwnerID,
		); err != nil {
			return nil, err
		}
		vulnerabilities = append(vulnerabilities, v)
	}
	return vulnerabilities, nil
}
